# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # in this example, there is a newer version already installed, 3.7.7, so the older version will be downloaded
        python-version: [3.6, 3.7, 3.8]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      - name: Cache pip
        uses: actions/cache@v2
        with:
          # This path is specific to Ubuntu
          path: ~/.cache/pip
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-

      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip setuptools wheel 
          python -m pip install -r requirements.txt
          
      - name: Python static type check
        shell: bash
        run:  find scripts -name "*.py" | xargs mypy  

      - name: Unittest and Coverage test
        # Don't know why ${{runner.workspace}} cannot catch run_test.sh
        # using ./ also works
        working-directory:  ${{ github.workspace }}
        shell: bash
        run: coverage run -m unittest discover -v -t . -s tests

      - name: Upload Code Coverage to codecov
        env:  
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        shell: bash
        working-directory: ${{ runner.workspace }}
        run: bash <(curl -s https://codecov.io/bash) || echo "Codecov did not collect coverage reports"